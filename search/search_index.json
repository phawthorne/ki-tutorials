{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"KI software tutorials From the repo page, click here to read the docs. From the docs page, click the links below or to the left. Getting started Python 101 Github 101 MSI 101 Scientific software best practices Articles RST guidelines","title":"Home"},{"location":"#ki-software-tutorials","text":"From the repo page, click here to read the docs. From the docs page, click the links below or to the left.","title":"KI software tutorials"},{"location":"#getting-started","text":"Python 101 Github 101 MSI 101","title":"Getting started"},{"location":"#scientific-software-best-practices","text":"Articles RST guidelines","title":"Scientific software best practices"},{"location":"docs/github101/","text":"Github 101 This page starts with some background on version control and github. Click here to skip to the hands-on part of the tutorial. Note This page is under development, and wide open for comments and contributions. There is a forum for discussion here . What is version control? A system for tracking line-by-line changes in your work in batches called \"commits\". Additional features include viewable histories of changes, ability to seamlessly switch between committed versions of the code, maintaining distinct working versions and assisting with merging them, and ability to sync updates from one machine to another. Version control can be done without Github. There is a software tool called git , among others, that allows you to do version control on your computer. Github, Gitlab, etc... are services that take git to the cloud. Version control is generally used at the project level. Sometimes there may be more than one \"repository\" as part of a project, but this is a more advanced case. What is Github? Github is a website/service provider that helps with version control and sharing/collaboration. It acts as a remote host for your projects so that they are accessible from the internet. It can serve project webpages through a service called github-pages. Provides both public and private repositories. Provides a host of collaboration-focused tools (issue boards, pull requests, teams/organizations, ...). Why is version control important for scientific work? These are some brief points on the value of version control in science. For more, see the section on best practices for reproducible research Collaboration - having your code on github makes it easy to share with a collaborator. Just add them to the project, or send a link if the repo is public. They will be able to keep up to date with all of your changes and contribute their own additions. Work history and versioning for results - each commit has a unique ID and can be assigned a label (\"tag\"). You can record the ID or assign a label to the commit used to generate a specific set of results, a manuscript, or a report, rather than needing to keep multiple versions of a file around, like \"analysis_results_jan_05_final_edits_FINAL_v3.py\" Reproducibility - When it gets to be time to share the project with the wider world as part of publication, having project code in a well-organized repository makes it much easier for users to access, understand, and test. Journal requirement compliance - as more journals require that your code be accessible, having it ready to go on github makes this an easy box to check off. Branching and merging during development - you can create \"branches\" of your project to add new functionality or restructure your code while keeping the main version untouched, then \"merge\" the branch into the main version when it's ready to go. Git makes it easy to switch back and forth between versions. Setting up a repository - the actual tutorial In this tutorial, we'll go through the basics of setting up a github repository, making some changes on your local computer, and pushing them back to github. Step 0: Get set up with git and a github account: If you don't have an account on github.com , please register for one. Macs should have a version of git installed already, and I'm not sure about Windows. Downloads are available from here: https://git-scm.com/downloads . Step 1: Make a new repository on github: On your github homepage, click the green \"New\" button in the upper left. Pick a name for the repository, like \"ki-github-tutorial\". It doesn't matter if other people have repositories with the same name. You can choose to make the repository public or private. If it's private, you can later grant access to specific people, or change it to public. Add a README file. You can skip the .gitignore file and license for now, but it's a good idea to add licenses to projects you intend to make public (topic for another time). Click \"Create repository\" at the bottom of the page. Note Git historically names the main branch in the repository master , but there is a push to switch to main . When you create the repository, there will probably be a message that says \"This will set ______ as the default branch. Change the default name in your settings\". Feel free to change to main if it isn't already. You may need to restart the new repository process. After you click the button, you'll be taken to the repository's page. There's a lot more on there than is needed for most uses. The main things to notice now are: * The text of the README.md file is rendered on this page, making a useful landing page for information about what the project is about, contact info, etc... * The bright green button that contains the link to download the code. * The \"settings\" menu right above the green button. Step 2: Create a local copy and make some changes On Mac, open the terminal (find Terminal.app if you haven't used it) Create the folder you want the project folder to go into (when you clone the repository, it will make a new folder with the same name as the repository). Navigate to that folder in the terminal (e.g. type cd /full/path/to/folder ). Click the green button on the repository's page, and copy the HTTPS URL in the popup. In the terminal, type git clone [repository-url-here] . This will download a copy of the repository to your computer. At this point, things can differ depending on what editor you like to use. Some editors, like Visual Studio Code, have git and a number of helper utilities built-in or accessible as extensions. We're going to stick with the command line/terminal for now. Open up README.md (this is a \"Markdown\" file). Underneath the title line, add some text describing the repository, then save and close the repo. In the terminal, run git status . This will show you that README.md has been modified since the last \"commit\" Run git add README.md , then git commit -m \"updating README\" . These commands tell git that we want README.md included in this commit, and then make the commit with a short message. Finally type git push to send these changes back to github. Reload the repository page on github to see the changes. Step 3: Create a repository for a project you've already started The process is slightly different when you want to start using github for a project you've already started. On your computer: Navigate to the project folder (inside the top-level folder for the project) in the terminal. Run git init . This sets up a local repository in the folder. Create file in the folder called .gitignore. You'll probably want to add some things to this file to exclude certain filetypes or folders from the repository. Either from your editor or the command line, add project files to be staged and make your initial commit. Next Steps: .gitignore files Set up a project gh-pages to serve a webpage Version control/github terms Repository Clone Commit Push/Pull Branch Merge Pull Request","title":"GitHub"},{"location":"docs/github101/#github-101","text":"This page starts with some background on version control and github. Click here to skip to the hands-on part of the tutorial. Note This page is under development, and wide open for comments and contributions. There is a forum for discussion here .","title":"Github 101"},{"location":"docs/github101/#what-is-version-control","text":"A system for tracking line-by-line changes in your work in batches called \"commits\". Additional features include viewable histories of changes, ability to seamlessly switch between committed versions of the code, maintaining distinct working versions and assisting with merging them, and ability to sync updates from one machine to another. Version control can be done without Github. There is a software tool called git , among others, that allows you to do version control on your computer. Github, Gitlab, etc... are services that take git to the cloud. Version control is generally used at the project level. Sometimes there may be more than one \"repository\" as part of a project, but this is a more advanced case.","title":"What is version control?"},{"location":"docs/github101/#what-is-github","text":"Github is a website/service provider that helps with version control and sharing/collaboration. It acts as a remote host for your projects so that they are accessible from the internet. It can serve project webpages through a service called github-pages. Provides both public and private repositories. Provides a host of collaboration-focused tools (issue boards, pull requests, teams/organizations, ...).","title":"What is Github?"},{"location":"docs/github101/#why-is-version-control-important-for-scientific-work","text":"These are some brief points on the value of version control in science. For more, see the section on best practices for reproducible research Collaboration - having your code on github makes it easy to share with a collaborator. Just add them to the project, or send a link if the repo is public. They will be able to keep up to date with all of your changes and contribute their own additions. Work history and versioning for results - each commit has a unique ID and can be assigned a label (\"tag\"). You can record the ID or assign a label to the commit used to generate a specific set of results, a manuscript, or a report, rather than needing to keep multiple versions of a file around, like \"analysis_results_jan_05_final_edits_FINAL_v3.py\" Reproducibility - When it gets to be time to share the project with the wider world as part of publication, having project code in a well-organized repository makes it much easier for users to access, understand, and test. Journal requirement compliance - as more journals require that your code be accessible, having it ready to go on github makes this an easy box to check off. Branching and merging during development - you can create \"branches\" of your project to add new functionality or restructure your code while keeping the main version untouched, then \"merge\" the branch into the main version when it's ready to go. Git makes it easy to switch back and forth between versions.","title":"Why is version control important for scientific work?"},{"location":"docs/github101/#setting-up-a-repository-the-actual-tutorial","text":"In this tutorial, we'll go through the basics of setting up a github repository, making some changes on your local computer, and pushing them back to github.","title":"Setting up a repository - the actual tutorial"},{"location":"docs/github101/#step-0-get-set-up-with-git-and-a-github-account","text":"If you don't have an account on github.com , please register for one. Macs should have a version of git installed already, and I'm not sure about Windows. Downloads are available from here: https://git-scm.com/downloads .","title":"Step 0: Get set up with git and a github account:"},{"location":"docs/github101/#step-1-make-a-new-repository-on-github","text":"On your github homepage, click the green \"New\" button in the upper left. Pick a name for the repository, like \"ki-github-tutorial\". It doesn't matter if other people have repositories with the same name. You can choose to make the repository public or private. If it's private, you can later grant access to specific people, or change it to public. Add a README file. You can skip the .gitignore file and license for now, but it's a good idea to add licenses to projects you intend to make public (topic for another time). Click \"Create repository\" at the bottom of the page. Note Git historically names the main branch in the repository master , but there is a push to switch to main . When you create the repository, there will probably be a message that says \"This will set ______ as the default branch. Change the default name in your settings\". Feel free to change to main if it isn't already. You may need to restart the new repository process. After you click the button, you'll be taken to the repository's page. There's a lot more on there than is needed for most uses. The main things to notice now are: * The text of the README.md file is rendered on this page, making a useful landing page for information about what the project is about, contact info, etc... * The bright green button that contains the link to download the code. * The \"settings\" menu right above the green button.","title":"Step 1: Make a new repository on github:"},{"location":"docs/github101/#step-2-create-a-local-copy-and-make-some-changes","text":"On Mac, open the terminal (find Terminal.app if you haven't used it) Create the folder you want the project folder to go into (when you clone the repository, it will make a new folder with the same name as the repository). Navigate to that folder in the terminal (e.g. type cd /full/path/to/folder ). Click the green button on the repository's page, and copy the HTTPS URL in the popup. In the terminal, type git clone [repository-url-here] . This will download a copy of the repository to your computer. At this point, things can differ depending on what editor you like to use. Some editors, like Visual Studio Code, have git and a number of helper utilities built-in or accessible as extensions. We're going to stick with the command line/terminal for now. Open up README.md (this is a \"Markdown\" file). Underneath the title line, add some text describing the repository, then save and close the repo. In the terminal, run git status . This will show you that README.md has been modified since the last \"commit\" Run git add README.md , then git commit -m \"updating README\" . These commands tell git that we want README.md included in this commit, and then make the commit with a short message. Finally type git push to send these changes back to github. Reload the repository page on github to see the changes.","title":"Step 2: Create a local copy and make some changes"},{"location":"docs/github101/#step-3-create-a-repository-for-a-project-youve-already-started","text":"The process is slightly different when you want to start using github for a project you've already started. On your computer: Navigate to the project folder (inside the top-level folder for the project) in the terminal. Run git init . This sets up a local repository in the folder. Create file in the folder called .gitignore. You'll probably want to add some things to this file to exclude certain filetypes or folders from the repository. Either from your editor or the command line, add project files to be staged and make your initial commit.","title":"Step 3: Create a repository for a project you've already started"},{"location":"docs/github101/#next-steps","text":".gitignore files Set up a project gh-pages to serve a webpage","title":"Next Steps:"},{"location":"docs/github101/#version-controlgithub-terms","text":"Repository Clone Commit Push/Pull Branch Merge Pull Request","title":"Version control/github terms"},{"location":"docs/msi101/","text":"Minnesota Supercomputing Institute Minnesota Supercomputing Institute ( MSI ) hosts UMN's supercomputers and associated data storage and software. KI researchers have access to MSI computing resources through an umbrella account owned by Jessica. We currently have about 10 TB of primary storage available as well as essentially unlimited computational time. What MSI offers Computation: MSI has two primary clusters, Mesabi and Mangi. A third, Agate, is coming at some point. There are some differences between the clusters, but Mesabi is a good default choice. Each cluster has a large number of individual nodes (think individual computers) that each have between 24 and 128 cores and up to 2TB of memory. Storage: There are several tiers of storage at MSI ( MSI docs ): Primary storage: this is the storage associated with your user account/home directory when you log in. It is high performance but limited in capacity. This is a good place to store working data that needs to be accessed frequently. Tier 2 storage: we have 120 TB of Tier 2 storage, which is accessed through an S3 bucket interface, or application like CyberDuck. This is a good place to store results or data for old projects. Scratch storage: This is temporary storage that can be used by a running job. There are global, local, and RAMdisk scratch locations. Global is very useful, since the files there persist for up to 30 days, but note that as of 2022-01-20 there have been ongoing issues with global scratch performance which can introduce long delays. Local and RAM scratch can still be used, but require you to include a data consolidation step in your job ( MSI docs ) Types of access (see docs for SSH and interactive connections) SSH: you can log in to MSI through the command line with ssh [YOUR X500]@mesabi.msi.umn.edu (must be on campus or have a VPN active). Note that when you first log in, you are on a \"login\" node, and should not run computationally demanding scripts. You can use this interface to submit jobs to be run, or to request an interactive session, which will give you a terminal session on a \"compute\" node (e.g. srun -N 1 -n 1 -t 4:00:00 -p interactive --tmp 20gb --pty bash ). Various interactive methods, including Desktop GUI and Jupyter notebook options. VSCode: Using the \"Remote Development\" and associated extensions, you can access, edit, and run code directly on MSI through the VSCode interface. Recommended option! Running a job There is documentation on MSI's site, so this is just a quick introduction/overview. In addition to the code that you need to run, you have to create a Slurm script ( docs ). Slurm is the software that manages all the jobs running on the cluster, and the Slurm script tells the manager what kind of environment you need (number of cores, total memory, runtime, etc...). This script also needs to call your code along with any additional setup or cleanup commands you need. For example, activating a particular python environment. Generally relatively small requests will begin running close to immediately, but in any case, once the job is queued you can log out and will be notified by email when your job starts and stops. Best Practices It is likely that you'll need to make some changes to your scripts in order to have them run on MSI: File paths and config files: In case you want to be able to run the same code locally and on MSI, you'll run into needing to change filepaths, such as paths for data, between each location. This gets old quickly. An easier solution is to rework your code so that filepaths are specified in a config file that you provide when running the code, and have separate configs for your personal machine and MSI. Transferring code: The best way to transfer code to MSI is through github. Create a repository that includes your local code, then clone it to MSI. This way, changes you make in either location can be easily synced to the other. Transferring data: Use an application like Cyberduck for smaller transfers, use Globus for larger transfers, or use some other tools like s3cmd or rclone . Software: There are a number of software packages that aren't available by default, but can be activated with a module load PACKAGE command. The available applications can be seen here . Other topics Python via Miniconda Julia Docker -> Singularity","title":"MSI"},{"location":"docs/msi101/#minnesota-supercomputing-institute","text":"Minnesota Supercomputing Institute ( MSI ) hosts UMN's supercomputers and associated data storage and software. KI researchers have access to MSI computing resources through an umbrella account owned by Jessica. We currently have about 10 TB of primary storage available as well as essentially unlimited computational time.","title":"Minnesota Supercomputing Institute"},{"location":"docs/msi101/#what-msi-offers","text":"Computation: MSI has two primary clusters, Mesabi and Mangi. A third, Agate, is coming at some point. There are some differences between the clusters, but Mesabi is a good default choice. Each cluster has a large number of individual nodes (think individual computers) that each have between 24 and 128 cores and up to 2TB of memory. Storage: There are several tiers of storage at MSI ( MSI docs ): Primary storage: this is the storage associated with your user account/home directory when you log in. It is high performance but limited in capacity. This is a good place to store working data that needs to be accessed frequently. Tier 2 storage: we have 120 TB of Tier 2 storage, which is accessed through an S3 bucket interface, or application like CyberDuck. This is a good place to store results or data for old projects. Scratch storage: This is temporary storage that can be used by a running job. There are global, local, and RAMdisk scratch locations. Global is very useful, since the files there persist for up to 30 days, but note that as of 2022-01-20 there have been ongoing issues with global scratch performance which can introduce long delays. Local and RAM scratch can still be used, but require you to include a data consolidation step in your job ( MSI docs ) Types of access (see docs for SSH and interactive connections) SSH: you can log in to MSI through the command line with ssh [YOUR X500]@mesabi.msi.umn.edu (must be on campus or have a VPN active). Note that when you first log in, you are on a \"login\" node, and should not run computationally demanding scripts. You can use this interface to submit jobs to be run, or to request an interactive session, which will give you a terminal session on a \"compute\" node (e.g. srun -N 1 -n 1 -t 4:00:00 -p interactive --tmp 20gb --pty bash ). Various interactive methods, including Desktop GUI and Jupyter notebook options. VSCode: Using the \"Remote Development\" and associated extensions, you can access, edit, and run code directly on MSI through the VSCode interface. Recommended option!","title":"What MSI offers"},{"location":"docs/msi101/#running-a-job","text":"There is documentation on MSI's site, so this is just a quick introduction/overview. In addition to the code that you need to run, you have to create a Slurm script ( docs ). Slurm is the software that manages all the jobs running on the cluster, and the Slurm script tells the manager what kind of environment you need (number of cores, total memory, runtime, etc...). This script also needs to call your code along with any additional setup or cleanup commands you need. For example, activating a particular python environment. Generally relatively small requests will begin running close to immediately, but in any case, once the job is queued you can log out and will be notified by email when your job starts and stops.","title":"Running a job"},{"location":"docs/msi101/#best-practices","text":"It is likely that you'll need to make some changes to your scripts in order to have them run on MSI: File paths and config files: In case you want to be able to run the same code locally and on MSI, you'll run into needing to change filepaths, such as paths for data, between each location. This gets old quickly. An easier solution is to rework your code so that filepaths are specified in a config file that you provide when running the code, and have separate configs for your personal machine and MSI. Transferring code: The best way to transfer code to MSI is through github. Create a repository that includes your local code, then clone it to MSI. This way, changes you make in either location can be easily synced to the other. Transferring data: Use an application like Cyberduck for smaller transfers, use Globus for larger transfers, or use some other tools like s3cmd or rclone . Software: There are a number of software packages that aren't available by default, but can be activated with a module load PACKAGE command. The available applications can be seen here .","title":"Best Practices"},{"location":"docs/msi101/#other-topics","text":"Python via Miniconda Julia Docker -> Singularity","title":"Other topics"},{"location":"docs/python101/","text":"Python 101 This tutorial aims to get you set up with a working installation of Python on your computer, and to provide a minimal introduction of how to write and run a simple data analysis script. Overview Pieces of the puzzle: We're going to install 3 main things in this tutorial: conda, Python, and VSCode. Here is how to think about these pieces from the perspective of Matlab/R: Conda: This is like the application's installer combined with the \"package\" or \"toolbox\" download window. We'll download this first, then use it to download python and install some add-ons (packages) that provide more specialized tools (e.g. pandas, which provides some excellent tools for working with csvs and other tabular data). When we need to add new packages later, or to check for updates to existing packages, we'll do this through conda. VSCode: This is equivalent to the Matlab or RStudio window - it has script editors, a terminal for running code, a file browser, etc... Python: This is the backend that runs the code and sends results back to VSCode or writes out files. While it is possible to open up python and type commands into the prompt, you will rarely do this - instead you'll write and run scripts using VSCode. Each of these pieces has alternatives - if you'd prefer using a different editor rather than VSCode, for example, there are lots of choices. But, for the sake of simplicity and my own familiarity, this (and future) tutorials will use these tools. Step 1: Installing Python and VSCode Python is different than some computational software (e.g. Matlab) in that the core language is generally separate from the software you use to write, edit, and often run the code. The language is also available from multiple sources and can exist in different, potentially conflicting, versions on your computer. The way I suggest setting up Python here is the one I've found to be the easiest and to minimize potential issues. Install Python We will use the version of Python available from Anaconda . It is useful to use this one, rather than downloading from python.org , because the anaconda version is carefully packaged not to interfere with other versions of python you might have installed on your computer, and comes with the conda tool, which provides a very helpful way to manage packages and \"virtual environments\" (not something to worry about for now, but very handy when you're juggling projects with different dependencies). Steps: Download the appropriate version of Python 3.8 from here This is the \"miniconda\" version, which provides a minimal set of packages to build on rather than some hundreds of things you might not need. Follow the appropriate instructions for your operating system here to open a command line window. Windows: open \"Anaconda Prompt\" from the start menu Run conda init powershell . This will set up the path variables to work in the PowerShell terminals outside this Anaconda Prompt exe (in particular, this is required to get this working in VSCode). Mac: open the \"Terminal\" app Create a new python environment: type conda create --name py38 python=3.8 in the command line. An \"environment\" is a version of python on your computer that has a particular set of packages installed. Typically, you can just have one main environment, but sometimes you might have a project that depends on having specific versions of packages that you want to keep separate from your main environment. Activate the environment: type conda activate py38 . Specify that we'd like to get packages from conda-forge : type conda config --add channels conda-forge , followed by conda config --set channel_priority strict . Conda-forge is a community-driven portal for accessing python packages. They put a ton of work into ensuring a successful installation process and compatibility between different package versions. These commands will make conda-forge the default download site. Install some useful packages: conda install numpy pandas matplotlib . This will also install a lot of other packages that these ones depend on. Answer \"Y\" if it asks for confirmation. In order to use this version of Python you just installed, you'll need to run the command conda activate py38 in the Anaconda Prompt or Terminal app each time you open a new window (or add it to your start up configuration, which is beyond the scope of this tutorial). Install VSCode In order to use Python effectively, you'll need a separate code editor. There are lots of choices, but I suggest using Microsoft's Visual Studio Code. It's free, very well supported, and also works with nearly every other programming language so you only need to learn one editor to have a very functional tool. Another good choice is PyCharm, which is specific to Python, but the company behind it has similar applications for other languages also. Download and install VSCode here . Step 2: Running a simple script Now we're going to create a project in VSCode, add a python script, and run it. Open VSCode, and choose \"Add workspace folder...\" from the \"Start\" section of the menu. Create a new folder called \"python-101\" (or whatever you want), and select Add. Workspaces are the way VSCode organizes files and settings associated with a particular project. When you close the window you'll be asked whether you want to save the workspace. Create a new file. Immediately save the file so that you can give it a name. Call it simple_script.py . VSCode will see the .py ending, and load its Python tools. Here's the tricky part - you need to configure VSCode so that it knows to use the py38 environment you created in step 1. Down in the lower-left corner of the window, in the blue bar, it will say something like 'Python 3.X ...' or may have a warning that says \"Select Python Environment\" Click to bring up a prompt about selecting the workspace. Select \"Entire workspace\" It should display a list of potential environments that includes the py38 environment - select this one. The VSCode docs about this mention that it can take a while for VSCode to find all the environments. Copy and paste this code into simple_script.py and save the file. Note that this script has a lot of excess print() statements and is not structured the way I'd typically write code - just treat it as a demo, not an example to be followed. import os # in order to use a package, you have to import it # adding `as pd` lets us refer to it with a shorter name import pandas as pd # load a data file input_file = \"PATH_TO_DATA.CSV\" df = pd . read_csv ( input_file ) print () print ( \"Original Table:\" ) print ( df . head ()) # head selects just the first few rows print () # group the data by state, and compute the sum (this will drop the # non-numeric \"county\" column) state_sums = df . groupby ( by = \"state\" ) . sum () # in the summed table, the summed column is still called \"value\", but # it will make more sense for us to give it a distinguishable name state_sums = state_sums . rename ( columns = { \"value\" : \"state_total\" }) # merge the sums back to the original table df = pd . merge ( df , state_sums , on = \"state\" ) print ( \"After merge:\" ) print ( df . head ()) print () # Calculate some additional statistics df [ \"county_fraction\" ] = df [ \"value\" ] / df [ \"state_total\" ] print ( \"With county fraction:\" ) print ( df . head ()) # Save the updated table in the same folder as the input file output_file = os . path . join ( os . path . dirname ( input_file ), \"output.csv\" ) df . to_csv ( output_file , index = False ) Make a new file, save it as \"data.csv\" in the same folder as the python script, and paste in these values: state,county,value MN,A,10 MN,B,20 IA,C,5 IA,D,5 IA,E,8 In simple_script.py , find the line that reads filepath = \"PATH_TO_DATA.CSV\" . Edit PATH_TO_DATA.CSV to be the correct path to the file on your computer. Hint: if you right click on data.csv in the VSCode \"Explorer\" side bar, there is an option to \"Copy Path\". Finally, find and click the little green arrow at the top of the editor window to run the script. Step 3: Core scientific Python packages Pandas : Good for dealing with tabular data. Allows grouping, reshaping, filling, joining, plotting, ect... Matplotlib : Package for making plots/figures. Pretty straightforward to use for basic things, and with some powerful (but complex) options for customized plots. Numpy : Provides fast numerical arrays and matrices. Scipy : Very wide-ranging package covering things like linear algebra, FFTs, interpolation, and some stats. Geopandas : Awesome package for working with shapefiles. Access the data as with Pandas, perform spatial operations, and create maps. Pygeoprocessing : A NatCap-created package for working with spatial datasets (rasters, particularly). A bit complicated, but powerful - it is the engine of most NatCap models. An alternative is to use GDAL directly but this has, by my estimation, an even steeper learning curve. Jupyter : A \"notebook\" based system for writing python code - this is an alternative to using something like VSCode. Can be useful for communication because it allows results (e.g. figures) and text blocks interspersed with the code. Also useful for quick prototyping sometimes. We didn't install all of these to start. To add new packages, make sure you have the right environment activated (e.g. conda activate py38 ), and then type conda install PACKAGE . You can also list multiple packages, and conda will ensure that the selected versions are mutually compatible.","title":"Python"},{"location":"docs/python101/#python-101","text":"This tutorial aims to get you set up with a working installation of Python on your computer, and to provide a minimal introduction of how to write and run a simple data analysis script.","title":"Python 101"},{"location":"docs/python101/#overview","text":"","title":"Overview"},{"location":"docs/python101/#pieces-of-the-puzzle","text":"We're going to install 3 main things in this tutorial: conda, Python, and VSCode. Here is how to think about these pieces from the perspective of Matlab/R: Conda: This is like the application's installer combined with the \"package\" or \"toolbox\" download window. We'll download this first, then use it to download python and install some add-ons (packages) that provide more specialized tools (e.g. pandas, which provides some excellent tools for working with csvs and other tabular data). When we need to add new packages later, or to check for updates to existing packages, we'll do this through conda. VSCode: This is equivalent to the Matlab or RStudio window - it has script editors, a terminal for running code, a file browser, etc... Python: This is the backend that runs the code and sends results back to VSCode or writes out files. While it is possible to open up python and type commands into the prompt, you will rarely do this - instead you'll write and run scripts using VSCode. Each of these pieces has alternatives - if you'd prefer using a different editor rather than VSCode, for example, there are lots of choices. But, for the sake of simplicity and my own familiarity, this (and future) tutorials will use these tools.","title":"Pieces of the puzzle:"},{"location":"docs/python101/#step-1-installing-python-and-vscode","text":"Python is different than some computational software (e.g. Matlab) in that the core language is generally separate from the software you use to write, edit, and often run the code. The language is also available from multiple sources and can exist in different, potentially conflicting, versions on your computer. The way I suggest setting up Python here is the one I've found to be the easiest and to minimize potential issues.","title":"Step 1: Installing Python and VSCode"},{"location":"docs/python101/#install-python","text":"We will use the version of Python available from Anaconda . It is useful to use this one, rather than downloading from python.org , because the anaconda version is carefully packaged not to interfere with other versions of python you might have installed on your computer, and comes with the conda tool, which provides a very helpful way to manage packages and \"virtual environments\" (not something to worry about for now, but very handy when you're juggling projects with different dependencies).","title":"Install Python"},{"location":"docs/python101/#steps","text":"Download the appropriate version of Python 3.8 from here This is the \"miniconda\" version, which provides a minimal set of packages to build on rather than some hundreds of things you might not need. Follow the appropriate instructions for your operating system here to open a command line window. Windows: open \"Anaconda Prompt\" from the start menu Run conda init powershell . This will set up the path variables to work in the PowerShell terminals outside this Anaconda Prompt exe (in particular, this is required to get this working in VSCode). Mac: open the \"Terminal\" app Create a new python environment: type conda create --name py38 python=3.8 in the command line. An \"environment\" is a version of python on your computer that has a particular set of packages installed. Typically, you can just have one main environment, but sometimes you might have a project that depends on having specific versions of packages that you want to keep separate from your main environment. Activate the environment: type conda activate py38 . Specify that we'd like to get packages from conda-forge : type conda config --add channels conda-forge , followed by conda config --set channel_priority strict . Conda-forge is a community-driven portal for accessing python packages. They put a ton of work into ensuring a successful installation process and compatibility between different package versions. These commands will make conda-forge the default download site. Install some useful packages: conda install numpy pandas matplotlib . This will also install a lot of other packages that these ones depend on. Answer \"Y\" if it asks for confirmation. In order to use this version of Python you just installed, you'll need to run the command conda activate py38 in the Anaconda Prompt or Terminal app each time you open a new window (or add it to your start up configuration, which is beyond the scope of this tutorial).","title":"Steps:"},{"location":"docs/python101/#install-vscode","text":"In order to use Python effectively, you'll need a separate code editor. There are lots of choices, but I suggest using Microsoft's Visual Studio Code. It's free, very well supported, and also works with nearly every other programming language so you only need to learn one editor to have a very functional tool. Another good choice is PyCharm, which is specific to Python, but the company behind it has similar applications for other languages also. Download and install VSCode here .","title":"Install VSCode"},{"location":"docs/python101/#step-2-running-a-simple-script","text":"Now we're going to create a project in VSCode, add a python script, and run it. Open VSCode, and choose \"Add workspace folder...\" from the \"Start\" section of the menu. Create a new folder called \"python-101\" (or whatever you want), and select Add. Workspaces are the way VSCode organizes files and settings associated with a particular project. When you close the window you'll be asked whether you want to save the workspace. Create a new file. Immediately save the file so that you can give it a name. Call it simple_script.py . VSCode will see the .py ending, and load its Python tools. Here's the tricky part - you need to configure VSCode so that it knows to use the py38 environment you created in step 1. Down in the lower-left corner of the window, in the blue bar, it will say something like 'Python 3.X ...' or may have a warning that says \"Select Python Environment\" Click to bring up a prompt about selecting the workspace. Select \"Entire workspace\" It should display a list of potential environments that includes the py38 environment - select this one. The VSCode docs about this mention that it can take a while for VSCode to find all the environments. Copy and paste this code into simple_script.py and save the file. Note that this script has a lot of excess print() statements and is not structured the way I'd typically write code - just treat it as a demo, not an example to be followed. import os # in order to use a package, you have to import it # adding `as pd` lets us refer to it with a shorter name import pandas as pd # load a data file input_file = \"PATH_TO_DATA.CSV\" df = pd . read_csv ( input_file ) print () print ( \"Original Table:\" ) print ( df . head ()) # head selects just the first few rows print () # group the data by state, and compute the sum (this will drop the # non-numeric \"county\" column) state_sums = df . groupby ( by = \"state\" ) . sum () # in the summed table, the summed column is still called \"value\", but # it will make more sense for us to give it a distinguishable name state_sums = state_sums . rename ( columns = { \"value\" : \"state_total\" }) # merge the sums back to the original table df = pd . merge ( df , state_sums , on = \"state\" ) print ( \"After merge:\" ) print ( df . head ()) print () # Calculate some additional statistics df [ \"county_fraction\" ] = df [ \"value\" ] / df [ \"state_total\" ] print ( \"With county fraction:\" ) print ( df . head ()) # Save the updated table in the same folder as the input file output_file = os . path . join ( os . path . dirname ( input_file ), \"output.csv\" ) df . to_csv ( output_file , index = False ) Make a new file, save it as \"data.csv\" in the same folder as the python script, and paste in these values: state,county,value MN,A,10 MN,B,20 IA,C,5 IA,D,5 IA,E,8 In simple_script.py , find the line that reads filepath = \"PATH_TO_DATA.CSV\" . Edit PATH_TO_DATA.CSV to be the correct path to the file on your computer. Hint: if you right click on data.csv in the VSCode \"Explorer\" side bar, there is an option to \"Copy Path\". Finally, find and click the little green arrow at the top of the editor window to run the script.","title":"Step 2: Running a simple script"},{"location":"docs/python101/#step-3-core-scientific-python-packages","text":"Pandas : Good for dealing with tabular data. Allows grouping, reshaping, filling, joining, plotting, ect... Matplotlib : Package for making plots/figures. Pretty straightforward to use for basic things, and with some powerful (but complex) options for customized plots. Numpy : Provides fast numerical arrays and matrices. Scipy : Very wide-ranging package covering things like linear algebra, FFTs, interpolation, and some stats. Geopandas : Awesome package for working with shapefiles. Access the data as with Pandas, perform spatial operations, and create maps. Pygeoprocessing : A NatCap-created package for working with spatial datasets (rasters, particularly). A bit complicated, but powerful - it is the engine of most NatCap models. An alternative is to use GDAL directly but this has, by my estimation, an even steeper learning curve. Jupyter : A \"notebook\" based system for writing python code - this is an alternative to using something like VSCode. Can be useful for communication because it allows results (e.g. figures) and text blocks interspersed with the code. Also useful for quick prototyping sometimes. We didn't install all of these to start. To add new packages, make sure you have the right environment activated (e.g. conda activate py38 ), and then type conda install PACKAGE . You can also list multiple packages, and conda will ensure that the selected versions are mutually compatible.","title":"Step 3: Core scientific Python packages"},{"location":"docs/rst-guidelines/","text":"RST Guidelines See this google doc .","title":"RST Guidelines"},{"location":"docs/rst-guidelines/#rst-guidelines","text":"See this google doc .","title":"RST Guidelines"},{"location":"docs/best-practices/articles/","text":"Articles This page collects useful articles on the subject of scientific software best practices and reproducible, open research. Best practices for scientific computing Wilson, et al (2014). PLOS Biology 8 topics with specific tips on ways to improve scientific code. Good enough practices for scientific computing Wilson, et al (2017). PLOS Computational Biology Where Wilson et al (2014) focused on more advanced principles, this paper identifies \"entry-level\" changes anyone working on scientific software can adopt.","title":"Articles"},{"location":"docs/best-practices/articles/#articles","text":"This page collects useful articles on the subject of scientific software best practices and reproducible, open research. Best practices for scientific computing Wilson, et al (2014). PLOS Biology 8 topics with specific tips on ways to improve scientific code. Good enough practices for scientific computing Wilson, et al (2017). PLOS Computational Biology Where Wilson et al (2014) focused on more advanced principles, this paper identifies \"entry-level\" changes anyone working on scientific software can adopt.","title":"Articles"}]}